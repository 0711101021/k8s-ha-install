apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health
        kubernetes cluster.local in-addr.arpa ip6.arpa {
          pods insecure
          upstream
          fallthrough in-addr.arpa ip6.arpa
        }
        prometheus :9153
        proxy . /etc/resolv.conf
        cache 30
        reload
        loadbalance
    }
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  generation: 1
  labels:
    k8s-app: kube-dns
  name: coredns
  namespace: kube-system
  resourceVersion: "344687"
spec:
  progressDeadlineSeconds: 600
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kube-dns
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s-app: kube-dns
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        resources:
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          procMount: Default
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/coredns
          name: config-volume
          readOnly: true
      dnsPolicy: Default
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: coredns
      serviceAccountName: coredns
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: Corefile
            path: Corefile
          name: coredns
        name: config-volume
status:
  availableReplicas: 2
  conditions:
  - message: ReplicaSet "coredns-6c66ffc55b" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 1
  readyReplicas: 2
  replicas: 2
  updatedReplicas: 2
#apiVersion: extensions/v1beta1
#kind: Deployment
#metadata:
#  name: coredns
#  namespace: kube-system
#  labels:
#    k8s-app: kube-dns
#    kubernetes.io/name: "CoreDNS"
#spec:
#  replicas: 2
#  strategy:
#    type: RollingUpdate
#    rollingUpdate:
#      maxUnavailable: 1
#  selector:
#    matchLabels:
#      k8s-app: kube-dns
#  template:
#    metadata:
#      annotations:
#        scheduler.alpha.kubernetes.io/critical-pod: ""
#      labels:
#        k8s-app: kube-dns
#    spec:
#      serviceAccountName: coredns
#      priorityClassName: system-cluster-critical
#      tolerations:
#      - key: CriticalAddonsOnly
#        operator: Exists
#      - effect: NoSchedule
#        key: node-role.kubernetes.io/master
#      containers:
#      - name: coredns
#        image: registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.2.2
#        imagePullPolicy: IfNotPresent
#        args: [ "-conf", "/etc/coredns/Corefile" ]
#        livenessProbe:
#          httpGet:
#            path: /health
#            port: 8080
#            scheme: HTTP
#          initialDelaySeconds: 60
#          timeoutSeconds: 10
#          successThreshold: 1
#          failureThreshold: 5
#        ports:
#        - containerPort: 53
#          name: dns
#          protocol: UDP
#        - containerPort: 53
#          name: dns-tcp
#          protocol: TCP
#        - containerPort: 9153
#          name: metrics
#          protocol: TCP
#        resources:
#          limits:
#            memory: 200Mi
#          requests:
#            cpu: 100m
#            memory: 70Mi
#        securityContext:
#          allowPrivilegeEscalation: false
#          capabilities:
#            add:
#            - NET_BIND_SERVICE
#            drop:
#            - all
#          readOnlyRootFilesystem: true
#        volumeMounts:
#        - name: config-volume
#          mountPath: /etc/coredns
#          readOnly: true
#        - name: host-time
#          mountPath: /etc/localtime
#      dnsPolicy: Default
#      volumes:
#      - name: host-time
#        hostPath:
#          path: /etc/localtime
#      - name: config-volume
#        configMap:
#          name: coredns
#          items:
#          - key: Corefile
#            path: Corefile
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: KubeDNS
  name: kube-dns
  namespace: kube-system
  resourceVersion: "221"
spec:
  clusterIP: 10.96.0.10
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: 53
  selector:
    k8s-app: kube-dns
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

#apiVersion: v1
#kind: Service
#metadata:
#  name: kube-dns
#  namespace: kube-system
#  annotations:
#    prometheus.io/port: "9153"
#    prometheus.io/scrape: "true"
#  labels:
#    k8s-app: kube-dns
#    kubernetes.io/cluster-service: "true"
#    kubernetes.io/name: "CoreDNS"
#spec:
#  selector:
#    k8s-app: kube-dns
#  clusterIP: 10.96.0.10
#  ports:
#  - name: dns
#    port: 53
#    protocol: UDP
#  - name: dns-tcp
#    port: 53
#    protocol: TCP
